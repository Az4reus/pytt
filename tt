#!/usr/bin/env python3.5

import sys

from src.reconstruct import get_current_project, load_archive
from src.serialise import replace_current_project


def add_handler(input_str: str):
    try:
        current_project = get_current_project()
        current_project.add_task(input_str)

        print(current_project.stringify())

        replace_current_project(current_project)
    except AttributeError:
        print(
                "Could not add the task to the project, "
                "since there are no Projects. \n"
                "Try creating one with 'tt new'!")


def do_handler(input_str):
    current_project = get_current_project()
    current_project.do_task(int(input_str))

    print(current_project.stringify())

    replace_current_project(current_project)


def clear_handler():
    current_project = get_current_project()
    current_project.clear()

    print(current_project.stringify())

    replace_current_project(current_project)


def list_handler():
    projects = load_archive()
    print("Overview")
    print(80 * '=')

    for p in projects:
        print(p.one_line_stringify())


def info_handler(input_str: str):
    try:
        project = get_current_project()
        pid = int(input_str)

        task = project.tasks[pid - 1]
        print(task.stringifgy_detail())
    except AttributeError:
        print("No Project or task could be found that matches the parameters.")


def parse_command(argv: str):
    if argv.startswith("add"):
        add_handler(argv[4:])

    if argv.startswith("do"):
        do_handler(argv[3:])

    if argv.startswith("clear"):
        clear_handler()

    if argv.startswith("list"):
        list_handler()

    if argv.startswith("info"):
        info_handler(argv[5:])

        # TODO "tt new $name" -> new Project.


if __name__ == '__main__':
    args = " ".join(sys.argv[1:])
    parse_command(args)
